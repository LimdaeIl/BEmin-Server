on:
  push:
    branches:
      - release

jobs:
  Deploy:
    runs-on: ubuntu-latest

    permissions:
      deployments: write

    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK v17 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: application.yml 파일 만들기
        run: echo '${{ secrets.APPLICATION_PROPERTIES }}' > ./src/main/resources/application.yml

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ap-northeast-2

      - name: Docker 이미지 생성
        run: docker build -t bemin-api-server .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag bemin-api-server ${{ steps.ecr-login.outputs.registry }}/bemin-api-server:latest

      - name: ECR에 Docker 이미지 Push
        run: docker push ${{ steps.ecr-login.outputs.registry }}/bemin-api-server:latest

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            docker stop bemin-api-server || true  
            docker rm bemin-api-server || true
            docker pull ${{ steps.ecr-login.outputs.registry }}/bemin-api-server:latest
            
            # Redis 연결용 네트워크 생성
            # docker network rm redis-network || true && docker network create redis-network

            # Redis 컨테이너 실행
            docker stop redis-server || true
            docker rm redis-server || true
            docker run -d --name redis-server -p 6379:6379 redis:latest
            # docker run -d --name redis-server --network redis-network -p 6379:6379 redis:latest
            
            # Spring Boot 애플리케이션 컨테이너 실행
            docker run -d --name bemin-api-server --link redis-server:redis -e TZ=Asia/Seoul -p 8080:8080 -v /home/ec2-user/workspace/logs:/logs ${{ steps.ecr-login.outputs.registry }}/bemin-api-server:latest
            # docker run -d --name bemin-api-server --network redis-network -e TZ=Asia/Seoul -p 8080:8080 -v /home/ec2-user/workspace/logs:/logs ${{ steps.ecr-login.outputs.registry }}/bemin-api-server:latest
            
